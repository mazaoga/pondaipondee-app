// Google Sheets API configuration  
// ‚ö†Ô∏è ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà URL ‡∏ô‡∏µ‡πâ‡∏î‡πâ‡∏ß‡∏¢ URL ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å Google Apps Script Deploy
// URL ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: https://script.google.com/macros/s/YOUR_SCRIPT_ID/exec
const GOOGLE_SCRIPTS_API_URL = 'https://script.google.com/macros/s/AKfycbztwXI_BN4_Zfaqy7ZVr5pL7fovyU-VpJlXINqCTdQjfYUgFsM07zjAPhAI5o8vMCtnuA/exec';

/**
 * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏•‡∏á Google Sheets
 * @param {object} calculationData - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
 * @returns {Promise<object>} ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
 */
export const saveCalculation = async (calculationData) => {
  try {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á
    const requestData = {
      action: 'save',
      timestamp: new Date().toISOString(),
      productPrice: calculationData.productPrice,
      downPayment: calculationData.downPayment,
      principal: calculationData.productPrice - calculationData.downPayment, // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏ô
      interestRate: calculationData.interestRate,
      months: calculationData.months,
      totalInterest: calculationData.totalInterest,
      totalAmount: calculationData.totalAmount,
      monthlyPayment: calculationData.monthlyPayment
    };

    console.log('üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ Google Sheets...', requestData);

    // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏õ Google Sheets ‡∏Å‡πà‡∏≠‡∏ô (‡∏ó‡∏±‡πâ‡∏á dev ‡πÅ‡∏•‡∏∞ production)
    try {
      const response = await fetch(GOOGLE_SCRIPTS_API_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'text/plain;charset=utf-8',
          'Accept': 'application/json',
        },
        body: JSON.stringify(requestData),
        mode: 'cors',
        credentials: 'omit'
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Save to Google Sheets Error:', response.status, errorText);
        throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ (${response.status}): ${errorText.substring(0, 100)}`);
      }

      const result = await response.json();
      console.log('‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÑ‡∏õ Google Sheets:', result);
      
      if (result.error) {
        throw new Error(result.error);
      }

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏õ localStorage ‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠ backup (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ development)
      if (import.meta.env.DEV) {
        try {
          const existingData = JSON.parse(localStorage.getItem('calculationHistory') || '[]');
          const newLocalData = {
            ...requestData,
            id: Date.now().toString(),
            timestamp: new Date().toISOString()
          };
          existingData.unshift(newLocalData);
          localStorage.setItem('calculationHistory', JSON.stringify(existingData));
          console.log('üíæ Backup ‡πÑ‡∏õ localStorage ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
        } catch (localError) {
          console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ backup ‡πÑ‡∏õ localStorage ‡πÑ‡∏î‡πâ:', localError);
        }
      }

      return {
        success: true,
        message: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
        data: result.data,
        source: 'googleSheets'
      };

    } catch (googleSheetsError) {
      console.error('üí• Google Sheets Error:', googleSheetsError);
      
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô development ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡πÉ‡∏´‡πâ fallback ‡πÑ‡∏õ‡πÉ‡∏ä‡πâ localStorage
      if (import.meta.env.DEV) {
        console.log('üîÑ Fallback: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏õ localStorage ‡πÅ‡∏ó‡∏ô');
        
        try {
          const existingData = JSON.parse(localStorage.getItem('calculationHistory') || '[]');
          const newData = {
            ...requestData,
            id: Date.now().toString(),
            timestamp: new Date().toISOString()
          };
          existingData.unshift(newData);
          localStorage.setItem('calculationHistory', JSON.stringify(existingData));
          
          return {
            success: true,
            message: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß (‡πÉ‡∏ä‡πâ localStorage)',
            data: newData,
            source: 'localStorage',
            warning: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets ‡πÑ‡∏î‡πâ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏õ localStorage ‡πÅ‡∏ó‡∏ô'
          };
        } catch (localError) {
          console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏õ localStorage ‡πÑ‡∏î‡πâ:', localError);
          throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á Google Sheets ‡πÅ‡∏•‡∏∞ localStorage');
        }
      } else {
        // Production - ‡πÑ‡∏°‡πà‡∏°‡∏µ fallback
        throw googleSheetsError;
      }
    }

  } catch (error) {
    console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', error);
    
    return {
      success: false,
      message: error.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
      error: error
    };
  }
};

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å Google Sheets
 * @returns {Promise<object>} ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
 */
export const getCalculationHistory = async () => {
  try {
    console.log('üîç ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å Google Sheets...');

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Google Scripts API ‡∏ó‡∏±‡πâ‡∏á development ‡πÅ‡∏•‡∏∞ production
    const response = await fetch(`${GOOGLE_SCRIPTS_API_URL}?action=get&timestamp=${Date.now()}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'text/plain;charset=utf-8',
        'Accept': 'application/json',
      },
      mode: 'cors',
      credentials: 'omit',
      cache: 'no-cache'
    });

    console.log('üì® getHistory Response status:', response.status);
    console.log('‚úÖ getHistory Response ok:', response.ok);

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheets ‡πÑ‡∏î‡πâ:', response.status, errorText);
      
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô development ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡πÉ‡∏´‡πâ fallback ‡πÑ‡∏õ‡πÉ‡∏ä‡πâ localStorage
      if (import.meta.env.DEV) {
        console.log('üîÑ Fallback: ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å localStorage ‡πÅ‡∏ó‡∏ô');
        const localData = JSON.parse(localStorage.getItem('calculationHistory') || '[]');
        return {
          success: true,
          data: localData.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp)),
          source: 'localStorage'
        };
      }
      
      throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ (${response.status}): ${errorText.substring(0, 100)}`);
    }

    const result = await response.json();
    console.log('üì• getHistory Response data:', result);
    
    if (result.error) {
      throw new Error(result.error);
    }

    return {
      success: true,
      data: result.data || [],
      source: 'googleSheets'
    };

  } catch (error) {
    console.error('üí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', error);
    
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô development ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢ ‡πÉ‡∏´‡πâ fallback ‡πÑ‡∏õ‡πÉ‡∏ä‡πâ localStorage
    if (import.meta.env.DEV && (error.name === 'TypeError' || error.message.includes('fetch'))) {
      console.log('üîÑ Network error - Fallback ‡πÑ‡∏õ‡πÉ‡∏ä‡πâ localStorage');
      try {
        const localData = JSON.parse(localStorage.getItem('calculationHistory') || '[]');
        return {
          success: true,
          data: localData.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp)),
          source: 'localStorage',
          warning: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets ‡πÑ‡∏î‡πâ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å localStorage ‡πÅ‡∏ó‡∏ô'
        };
      } catch (localError) {
        console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô localStorage ‡πÑ‡∏î‡πâ:', localError);
      }
    }
    
    return {
      success: false,
      message: error.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
      error: error,
      data: []
    };
  }
};

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets
 * @returns {Promise<boolean>} ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
 */
export const testConnection = async () => {
  try {
    console.log('üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets...');
    
    const response = await fetch(`${GOOGLE_SCRIPTS_API_URL}?action=test&timestamp=${Date.now()}`, {
      method: 'GET',
      mode: 'cors',
      cache: 'no-cache',
      redirect: 'follow'
    });

    console.log('üì® testConnection Response status:', response.status);
    console.log('‚úÖ testConnection Response ok:', response.ok);

    if (!response.ok) {
      console.error('‚ùå testConnection Response not ok:', response.status);
      return false;
    }

    const result = await response.json();
    console.log('üì• testConnection Response data:', result);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ response ‡∏°‡∏µ success: true ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    return result && result.success === true;

  } catch (error) {
    console.error('üí• ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets ‡πÑ‡∏î‡πâ:', error);
    return false;
  }
};

/**
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Google Sheets (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug)
 */
export const testSaveToGoogleSheets = async () => {
  const testData = {
    productPrice: 100000,
    downPayment: 20000,
    interestRate: 5,
    months: 12,
    totalInterest: 4000,
    totalAmount: 84000,
    monthlyPayment: 7000
  };

  console.log('üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ Google Sheets...');
  
  try {
    // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ production mode ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    const data = {
      action: 'save',
      timestamp: new Date().toISOString(),
      productPrice: testData.productPrice,
      downPayment: testData.downPayment,
      principal: testData.productPrice - testData.downPayment,
      interestRate: testData.interestRate,
      months: testData.months,
      totalInterest: testData.totalInterest,
      totalAmount: testData.totalAmount,
      monthlyPayment: testData.monthlyPayment
    };

    console.log('üì§ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á:', data);

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô
    console.log('üîó ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ URL:', GOOGLE_SCRIPTS_API_URL);
    
    const response = await fetch(GOOGLE_SCRIPTS_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'text/plain;charset=utf-8',
        'Accept': 'application/json',
      },
      body: JSON.stringify(data),
      mode: 'cors',
      credentials: 'omit'
    });

    console.log('üì® Response status:', response.status);
    console.log('‚úÖ Response ok:', response.ok);
    console.log('üè∑Ô∏è Response headers:', [...response.headers.entries()]);

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Response error text:', errorText);
      throw new Error(`HTTP Error ${response.status}: ${errorText.substring(0, 200)}`);
    }

    const result = await response.json();
    console.log('üì• Response data:', result);

    return result;
  } catch (error) {
    console.error('üí• ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:', error);
    
    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug
    if (error.name === 'TypeError' && error.message.includes('fetch')) {
      throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Internet ‡∏´‡∏£‡∏∑‡∏≠ URL ‡∏Ç‡∏≠‡∏á Google Apps Script');
    }
    
    throw error;
  }
};

/**
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö URL ‡∏î‡πâ‡∏ß‡∏¢ Simple GET Request
 */
export const testGoogleSheetsURL = async () => {
  try {
    console.log('üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö URL:', GOOGLE_SCRIPTS_API_URL);
    
    const response = await fetch(`${GOOGLE_SCRIPTS_API_URL}?action=test&timestamp=${Date.now()}`, {
      method: 'GET',
      mode: 'cors',
      credentials: 'omit',
      cache: 'no-cache'
    });

    console.log('üì® Status:', response.status);
    console.log('‚úÖ OK:', response.ok);
    console.log('üè∑Ô∏è Content-Type:', response.headers.get('content-type'));

    if (response.ok) {
      const text = await response.text();
      console.log('üì• Response text:', text);
      
      try {
        const json = JSON.parse(text);
        console.log('üìÑ Response JSON:', json);
        return { success: true, data: json };
      } catch (e) {
        console.warn('‚ö†Ô∏è Response is not JSON:', text);
        return { success: true, data: text };
      }
    } else {
      const errorText = await response.text();
      console.error('‚ùå Error response:', errorText);
      return { success: false, error: `HTTP ${response.status}: ${errorText}` };
    }
  } catch (error) {
    console.error('üí• Network error:', error);
    return { 
      success: false, 
      error: error.message,
      type: error.name === 'TypeError' ? 'NETWORK_ERROR' : 'UNKNOWN_ERROR'
    };
  }
};
